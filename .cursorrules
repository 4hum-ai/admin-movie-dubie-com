## Cursor Rules for Admin UI

### Purpose

This is a lowâ€‘code Vue 3 + TypeScript admin UI.

### Architecture map

- Entry: `src/main.ts` (Pinia, Router, Theme init)
- Routing: `src/router/index.ts`
- State: `src/stores/auth.ts`
- API gateway: `src/utils/useApiGateway.ts` (fetch + Firebase token)
- Views: `src/views/ItemListView.vue`, `src/views/ItemDetailView.vue`
- Shared components in atomic design: `src/components/{atoms,molecules,organisms,templates}`

### Data contracts

- UI config: `GET /api/admin-ui/modules/:module/config` with keys used by templates (list/kanban/gallery/calendar/detail/form). Keep keys stable.
- Data: `/api/:module` list supports `page, limit, search, searchFields, sort, preset, from, to`. Detail at `/api/:module/:id`. CRUD returns `{ data }`.

### Coding conventions

- Language: TypeScript, Vue 3 SFC `<script setup lang="ts">`
- State: Pinia stores under `src/stores/*`
- Composables: `src/composables/*` return plain functions/objects and avoid side effects on import
- Styling: Tailwind classes only; do not add global CSS unless in `src/style.css`
- Errors: Surface via `useToast.push(...)` not `alert()`
- Auth: Use `useAuthStore` and `useAuth` for any auth changes
- API: Use `useMovieService` methods; do not fetch directly in components
- Routing: Add or change routes only in `src/router/index.ts`
- Indentation: match existing style; avoid reformatting unrelated code

### Icons

- Default source: `unplugin-icons` with Iconify collections (configured in `vite.config.ts` via `Icons()`). Prefer `mdi` (`@iconify-json/mdi`) to match existing usage.
- Import pattern (explicit, per-component):
  - In `<script setup>`:
    ```ts
    import CheckIcon from "~icons/mdi/check-circle-outline";
    ```
  - In template:
    ```vue
    <CheckIcon class="h-5 w-5 text-green-600" aria-hidden="true" />
    ```
- Sizing & color: use Tailwind classes (`w-4 h-4`, `text-muted-foreground`, etc.). Avoid inline `width`/`height` unless required.
- Accessibility: decorative icons must include `aria-hidden="true"`. If conveying meaning, add `role="img"` and `aria-label`.
- Do not: use `<i-*>` shorthand components (not enabled). Do not fetch remote SVGs or embed external URLs.
- Lucide: when needed, prefer Iconify path `~icons/lucide/{name}`. Only use `lucide-vue-next` direct imports if an icon is missing from Iconify, e.g. `import { ArrowRight } from "lucide-vue-next"` and register/use locally.
- Adding new sets: add `@iconify-json/{collection}` as a devDependency, then import with `~icons/{collection}/{icon-name}`. Keep imports on-demand; no global icon registry.
